
;; Topbar
(include "widgets/cpu.yuck")
(include "widgets/ram.yuck")
(include "widgets/hyprland-workspaces.yuck")
(defwidget leftpart []
    (box :class "left" :orientation "h" :halign "start" :space-evenly false :spacing 20
        (workspaces)
        (cpu)
        (ram)
    )
)

(include "widgets/hyprland-title.yuck")
(defwidget centerpart []
    (box :class "sidestuff" :orientation "h" :halign "center"
        (title)
    )
)

(defpoll volume :interval "1s" :initial "1" `amixer sget Master | grep 'Left' | tr -d '[]%' | awk '{print $5}' | tail -1`)
(defpoll volume_mute :interval "1s" :initial "1" `amixer sget Master | grep 'Left' | tr -d '[]%' | awk '{print $6}' | tail -1`)
(defwidget sound []
    (box :class "sound" :orientation "h"
        (label :text "${volume}% ${volume_mute == "off" ? "󰝟" : volume >= 80 ? "" : volume >= 20 ? "" : ""}")
    )
)

(defpoll light :interval "1s" :initial "0" `light`)
(defwidget light []
    (box :class "light" :orientation "h"
        (label :text "${round(light, 0)}% ")
    )
)

(include "widgets/network.yuck")
(include "widgets/battery.yuck")
(include "widgets/time.yuck")
(defwidget rightpart []
    (box :class "sidestuff" :orientation "h" :halign "end" :spacing 20 :space-evenly false
        (sound)
        (light)
        (network)
        (battery)
        (time)
    )
)

(defwindow topbar
    :monitor 0
    :geometry (geometry :x "0%"
                       :y "0px"
                       :width "100%"
                       :height "40px"
                       :anchor "top center")
    :stacking "bg"
    :exclusive true
    (centerbox :style "margin: 5px 10px;"
        (leftpart)
        (centerpart)
        (rightpart)
    )
)

;(defvar fullname "fullname")
;(defvar hostname "hostname")
;(defvar network_name "networkxxxxxx")
;(defvar network_name_truncated "networktruncated")
;(defvar bluetooth_status "Off")
;(defvar bluetooth_supported "true")
;(defvar airplane_mode_status "airplane_mode_status")
;(defvar redshift_status "#1c2325")
;(defvar dnd_status "#1c2325")
;
;(defwidget cc_button [?title ?icon ?is_active ?has_arrow_if_active ?onclick ?disabled ?tooltip]
;	(box :orientation "v" :space-evenly "false" :class "cc-button" :tooltip {tooltip ?: "Disabled"}
;		(box :orientation "h" :class "cc-button-btn" :style {disabled == true ? "background-color: #101415;" : (is_active == true ? "background-color: #1C2325;" : "background-color: #151a1c;")}
;			(box
;				:orientation "h"
;				:style {disabled == true ? "" : (is_active == true ? "background-color: #96D6B0; margin: 0em .75em 0em .25em; border-radius: 6px;" : "")})
;			(button
;				:class "cc-button-icon"
;				:style {disabled == true ? "color: #6e7071;" : ""}
;				:onclick {onclick ?: "echo 'debugger'"} 
;				{icon ?: ""})
;			(box
;				:class "sep-column"
;				:style "min-height: calc(16px + 8px);")
;			(button
;				:visible {has_arrow_if_active == false ? false : (is_active == true ?: false)}
;				:class "cc-button-clicker" :onclick {onclick ?: "echo 'debugger'"} 
;				:style {disabled == true ? "color: #6e7071;" : ""} "")
;		)
;		(label :class "cc-button-title" :text {title ?: ""} :style {disabled == true ? "color: #6e7071;" : ""})
;	)
;)
;
;(defwidget cc []
;    (box :class "control-center" :orientation "v" :space-evenly "false"
;		(box :class "third-row" :orientation "h" :space-evenly "true"
;			(box :class "user-info" :orientation "h" :halign "start" :space-evenly "false"
;				(box :class "user-info-avatar")
;				(box :orientation "v" :space-evenly "false" :style "margin-top: .25em;"
;					(label :class "user-info-label" :halign "start" :text "${fullname}")
;					(label :class "user-info-hostname" :halign "start" :text "@${hostname}")
;				)
;			)
;			(box :class "system-btn" :halign "end" :orientation "h" :space-evenly "false"
;				(button :class "exit-btn" :onclick "sh $HOME/.local/bin/lck &" "")
;				(button :class "lock-btn" :onclick "bspc quit &" "")
;			)
;		)
;        (box :class "first-row" :orientation "v" :space-evenly "false"
;            (box :orientation "h"
;                (cc_button :title {strlength(network_name) >= 13 ? network_name_truncated : network_name} :icon "󰤨"
;                    :is_active {network_name != "Wi-Fi"} :onclick "iwgtk &"
;                    :tooltip "Connected to ${network_name}"
;                )
;                (cc_button :title {bluetooth_status != "Off" ? hostname : "Bluetooth"} :icon "󰂯"
;                    :is_active {bluetooth_status != "Off"} :onclick "blueman-manager &"
;                    :tooltip "Status: ${bluetooth_status}" :disabled {bluetooth_supported == "false"}
;                )
;                (cc_button :title "Airplane Mode" :icon "󰀝"
;                    :is_active {airplane_mode_status == ""} :onclick "sh ./scripts/dashActions.sh am"
;                    :tooltip "Status: ${airplane_mode_status == '' ? 'On' : 'Off'}" :disabled {bluetooth_supported == "false"}
;                )
;            )
;            (box :orientation "h" :style "margin-top: -1.5em;"
;                (cc_button :title "Night Light" :icon ""
;                    :is_active {redshift_status == "#1c2325"} :onclick "sh ./scripts/getRedshift.sh toggle"
;                    :tooltip "Status: ${redshift_status == '#1c2325' ? 'On' : 'Off'}"
;                )
;                (cc_button :title "Do Not Disturb" :icon ""
;                    :is_active {dnd_status == "#1c2325"} :onclick "sh ./scripts/dashActions.sh dnd"
;                    :tooltip "Status: ${dnd_status == '#1c2325' ? 'On' : 'Off'}"
;                )
;                (cc_button :disabled "true")
;            )
;        )
;    )
;)
;(defwindow cc
;    :monitor 0
;    :geometry (geometry :x "1%"
;						:y "0"
;						:width "27%"
;						:height "40%"
;						:anchor "top right")
;    :stacking "fg"
;    (cc)
;)

; (defwidget control-center []
; (box :class "control-center" :orientation "v" :space-evenly "false"
; 			;; Too lazy to change the name of the class. :P
; 			;; Please make a PR if you want to change it. ;)
; 			(box :class "third-row" :orientation "h" :space-evenly "true"
; 				(box :class "user-info" :orientation "h" :halign "start" :space-evenly "false"
; 					(box :class "user-info-avatar")
; 					(box :orientation "v" :space-evenly "false" :style "margin-top: .25em;"
; 						(label :class "user-info-label" :halign "start" :text "${fullname}")
; 						(label :class "user-info-hostname" :halign "start" :text "@${hostname}")
; 					)
; 				)
; 				(box :class "system-btn" :halign "end" :orientation "h" :space-evenly "false"
; 					(button :class "exit-btn" :onclick "sh $HOME/.local/bin/lck &" "")
; 					(button :class "lock-btn" :onclick "bspc quit &" "")
; 				)
; 			)
; 			(box :class "first-row" :orientation "v" :space-evenly "false"
; 				(box :orientation "h"
; 					(cc_button :title {strlength(network_name) >= 13 ? network_name_truncated : network_name} ;:icon network_icon
; 						:is_active {network_name != "Wi-Fi"} :onclick "iwgtk &"
; 						:tooltip "Connected to ${network_name}"
; 					)
; 					(cc_button :title {bluetooth_status != "Off" ? hostname : "Bluetooth"} ;:icon bluetooth_icon
; 						:is_active {bluetooth_status != "Off"} :onclick "blueman-manager &"
; 						:tooltip "Status: ${bluetooth_status}" :disabled {bluetooth_supported == "false"}
; 					)
; 					(cc_button :title "Airplane Mode" ;:icon airplane_mode_status
; 						:is_active {airplane_mode_status == ""} :onclick "sh ./scripts/dashActions.sh am"
; 						:tooltip "Status: ${airplane_mode_status == '' ? 'On' : 'Off'}" :disabled {bluetooth_supported == "false"}
; 					)
; 				)
; 				(box :orientation "h" :style "margin-top: -1.5em;"
; 					(cc_button :title "Night Light" :icon ""
; 						:is_active {redshift_status == "#1c2325"} :onclick "sh ./scripts/getRedshift.sh toggle"
; 						:tooltip "Status: ${redshift_status == '#1c2325' ? 'On' : 'Off'}"
; 					)
; 					(cc_button :title "Do Not Disturb" :icon ""
; 						:is_active {dnd_status == "#1c2325"} :onclick "sh ./scripts/dashActions.sh dnd"
; 						:tooltip "Status: ${dnd_status == '#1c2325' ? 'On' : 'Off'}"
; 					)
; 					(cc_button :disabled "true")
; 				)
; 			)
; 			(box :class "second-row" :orientation "v"
; 				(box :class "volume-slider" :orientation "h" :space-evenly "false"
; 					(label :class "volume-icon" :text {volume_muted ? "" : 
; 						volume <= 30 ? "" : volume <= 60 ? "" : ""
; 					})
; 					(scale :min 0
; 						:max 101
; 						:value volume
; 						:orientation "h"
; 						:tooltip "Volume: ${volume}%"
; 						:onchange "amixer -D pulse sset Master {}%"
; 					)
; 					(label :class "volume-text" :text "${volume}%")
; 				)
; 				(box :class "brightness-slider" :orientation "h" :space-evenly "false"
; 					(label :class "brightness-icon" :text {
; 						brightness <= 30 ? "" : brightness <= 60 ? "" : ""
; 					})
; 					(scale :min 0
; 						:max 101
; 						:value brightness
; 						:orientation "h"
; 						:tooltip "Brightness: ${brightness}%"
; 						:onchange "brightnessctl set {}%"
; 					)
; 					(label :class "brightness-text" :text "${brightness}%")
; 				)
; 			)
; 		)
; )
; (defwindow control-center
;     :monitor 0
;     :geometry (geometry :x "-1%"
; 						:y "60%"
; 						:width "27%"
; 						:height "80%"
; 						:anchor "bottom right")
;     :stacking "fg"
;     (control-center)
; )


;; Variables
; (defpoll clock_time :interval "5m" "date +\%I")
; (defpoll clock_minute :interval "5s" "date +\%M")
; (defpoll clock_date :interval "10h" "date '+%d/%m'")
; (defpoll volume_percent :interval "3s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
; (defpoll mic_percent :interval "3s" "amixer -D pulse sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
; (defpoll brightness_percent :interval "5s" "brightnessctl -m -d intel_backlight | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'")
; (defpoll memory :interval "15s" "scripts/memory")
; (defpoll memory_used_mb :interval "2m" "scripts/mem-ad used")
; (defpoll memory_total_mb :interval "2m" "scripts/mem-ad total")
; (defpoll memory_free_mb :interval "2m" "scripts/mem-ad free")
; (defvar vol_reveal false)
; (defvar br_reveal false)
; (defvar music_reveal false)
; (defvar wifi_rev false)
; (defvar time_rev false)
; ; (deflisten workspace "scripts/workspace")
; 
; (defvar eww "$HOME/.local/bin/eww/eww -c $HOME/.config/eww/bar")
; 
; 
; (defpoll COL_WLAN :interval "1m" "~/.config/eww/bar/scripts/wifi --COL")
; (defpoll ESSID_WLAN :interval "1m" "~/.config/eww/bar/scripts/wifi --ESSID")
; (defpoll WLAN_ICON :interval "1m" "~/.config/eww/bar/scripts/wifi --ICON")
; 
; 
; (defpoll song :interval "2s"  "~/.config/eww/bar/scripts/music_info --song")
; (defpoll song_artist :interval "2s"  "~/.config/eww/bar/scripts/music_info --artist")
; (defpoll current_status :interval "1s"  "~/.config/eww/bar/scripts/music_info --time")
; (defpoll song_status :interval "2s"  "~/.config/eww/bar/scripts/music_info --status")
; (defpoll cover_art :interval "2s"  "~/.config/eww/bar/scripts/music_info --cover")
; 
; (defpoll calendar_day :interval "20h" "date '+%d'")
; (defpoll calendar_year :interval "20h" "date '+%Y'")

;; windows

; (defwindow bar
;     :monitor 0
;     :exclusive true
;           :geometry (geometry :x "0%"
;                        :y "9px"
;                        :width "98%"
;                        :height "30px"
;                        :anchor "top center")
;           :stacking "fg"
;   (bar_1))
; 
; ;; widgets
; 
; (defwidget wifi [] 
;   (eventbox :onhover "${eww} update wifi_rev=true"
; 			  :onhoverlost "${eww} update wifi_rev=false"
; 		(box :vexpand "false" :hexpand "false" :space-evenly "false"
; 				(button :class "module-wif" :onclick "networkmanager_dmenu" :wrap "false" :limit-width 12 :style "color: ${COL_WLAN};" WLAN_ICON)
; 	(revealer :transition "slideright"
; 			  :reveal wifi_rev
; 			  :duration "350ms"
; 	(label    :class "module_essid"
; 			  :text ESSID_WLAN
; 			  :orientation "h"
; 			  )))))
; 
; 
; ; (defwidget workspaces []
; ;   (literal :content workspace))
; 
; 
; ; (defwidget bat []
; ; 		(box :class "bat_module" :vexpand "false" :hexpand "false" 
; ;             (circular-progress :value battery
; ;                 :class "batbar"
; ;                 :thickness 4
; ;             (button 
; ;                 :class "iconbat"
; ;                 :limit-width 2
; ;                 :tooltip "battery on ${battery}%"
; ;                 :show_truncated false
; ;                 :onclick "$HOME/.config/eww/bar/scripts/pop system"
; ;                 :wrap false
; ;                 ""))))
; 
; 
; (defwidget mem []
; 		(box :class "mem_module" :vexpand "false" :hexpand "false" 
;             (circular-progress :value memory
;                 :class "membar"
;                 :thickness 4
;             (button 
;                 :class "iconmem"
;                 :limit-width 2
;                 :tooltip "using ${memory}% ram"
;                 :onclick "$HOME/.config/eww/bar/scripts/pop system"
;                 :show_truncated false
;                 :wrap false
;                 ""))))
; 
; 
; 
; (defwidget sep []
;   (box :class "module-2" :vexpand "false" :hexpand "false"
;     (label :class "separ" :text "|")))
; 
; (defwidget clock_module []
;   (eventbox :onhover "${eww} update time_rev=true"
; 			  :onhoverlost "${eww} update time_rev=false"
;     (box :class "module" :space-evenly "false" :orientation "h" :spacing "3" 
;       (label :text clock_time :class "clock_time_class" )
;       (label :text "" :class "clock_time_sep" )
;       (label :text clock_minute :class "clock_minute_class")
; 	  (revealer :transition "slideleft"
; 			  :reveal time_rev
; 			  :duration "350ms"
;       (button :class "clock_date_class"
;              :onclick "$HOME/.config/eww/bar/scripts/pop calendar" clock_date
;         )
;   ))))
;   
; (defwidget volume []
;   (eventbox :onhover "${eww} update vol_reveal=true"
; 			  :onhoverlost "${eww} update vol_reveal=false"
;   (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3" 
; 	(button   :onclick "scripts/pop audio"   :class "volume_icon" "")
; 	(revealer :transition "slideleft"
; 			  :reveal vol_reveal
; 			  :duration "350ms"
; 	(scale    :class "volbar"
; 			  :value volume_percent
; 			  :orientation "h"
; 			  :tooltip "${volume_percent}%"
; 			  :max 100
; 			  :min 0
; 			  :onchange "amixer -D pulse sset Master {}%" )))))
; 
; (defwidget bright []
;   (eventbox :onhover "${eww} update br_reveal=true" :onhoverlost "${eww} update br_reveal=false"
;   (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3" 
;     (label :text "" :class "bright_icon" :tooltip "brightness")
; 	(revealer :transition "slideleft"
; 			  :reveal br_reveal
; 			  :duration "350ms"
; 	(scale    :class "brightbar"
; 			  :value brightness_percent
; 			  :orientation "h"
; 			  :tooltip "${brightness_percent}%"
; 			  :max 100
; 			  :min 0
; 			  :onchange "brightnessctl set {}%" )))))
; 
; 
; 
; 	;;  Music 
; (defwidget music [] 
;   (eventbox :onhover "${eww} update music_reveal=true"
; 			  :onhoverlost "${eww} update music_reveal=false"
; 		(box :class "module-2" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
; 			(box :class "song_cover_art" :vexpand "false" :hexpand "false" :style "background-image: url('${cover_art}');")
; 			(button :class "song" :wrap "true" :onclick "~/.config/eww/bar/scripts/pop music" song)
; 	    (revealer :transition "slideright"
; 			      :reveal music_reveal
; 			      :duration "350ms"
;           (box :vexpand "false" :hexpand "false" :oreintation "h" 
;                     (button :class "song_btn_prev" :onclick "~/.config/eww/bar/scripts/music_info --prev" "")
; 					(button :class "song_btn_play" :onclick "~/.config/eww/bar/scripts/music_info --toggle" song_status)
; 					(button :class "song_btn_next" :onclick "~/.config/eww/bar/scripts/music_info --next" ""))))))
; 
; 
; 
; (defwidget left []
; 	(box :orientation "h" 
; 		 :space-evenly false  
;          :halign "end"
; 		 :class "left_modules"
; (bright)
; (volume)
; (wifi)
; (sep)
; (bat)
; (mem)
; (sep)
; (clock_module)))
; 
; 
; (defwidget right []
; 	(box :orientation "h" 
; 		 :space-evenly false  
;          :halign "start"
; 		 :class "right_modules"
; (workspaces)))
; 
; 
; (defwidget center []
; 	(box :orientation "h" 
; 		 :space-evenly false  
;          :halign "center"
; 		 :class "center_modules"
; (music)))
; 
; (defwidget bar_1 []
;   (box :class "bar_class"
;        :orientation "h"
;   (right)
;   (center)
;   (left)
;     ))
;   
; (defwidget system []
;   (box :class "sys_win" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 0
;   (box :class "sys_bat_box" :orientation "h" :space-evenly "false"
;       (circular-progress :value battery
;                 :class "sys_bat"
;                 :thickness 9
;             (label :text ""
;                 :class "sys_icon_bat"
;                 :limit-width 2
;                 :show_truncated false
;                 :wrap false))
;             (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
;             (label :text "battery"
;                 :halign "start"
;                 :class "sys_text_bat"
;                 :limit-width 9
;                 :show_truncated false
;                 :wrap false)
;             (label :text "${battery}%"
;                 :halign "start"
;                 :class "sys_text_bat_sub"
;                 :limit-width 22
;                 :show_truncated false
;                 :wrap false)
;             (label :text "${battery_status}"
;                 :halign "start"
;                 :class "sys_text_bat_sub"
;                 :limit-width 22
;                 :show_truncated false
;                 :wrap false)))
;             (label :text "" :class "sys_sep" :halign "center")
;   (box :class "sys_mem_box" :orientation "h" :space-evenly "false" :halign "start"
;       (circular-progress :value memory
;                 :class "sys_mem"
;                 :thickness 9
;             (label :text ""
;                 :class "sys_icon_mem"
;                 :limit-width 2
;                 :show_truncated false
;                 :wrap false
;                 :angle 0.0))
;             (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
;             (label :text "memory"
;                 :halign "start"
;                 :class "sys_text_mem"
;                 :limit-width 9
;                 :show_truncated false
;                 :wrap false)
;             (label :text "${memory_used_mb} | ${memory_total_mb}mb "
;                 :halign "start"
;                 :class "sys_text_mem_sub"
;                 :limit-width 22
;                 :show_truncated false
;                 :wrap false)
;             (label :text "${memory_free_mb}mb free"
;                 :halign "start"
;                 :class "sys_text_mem_sub"
;                 :limit-width 22
;                 :show_truncated false
;                 :wrap false)))))
; 
; (defwidget cal []
; 	(box :class "cal" :orientation "v"
; 	(box :class "cal-in"
; 	(calendar :class "cal" 
; 			  :day calendar_day 
; 			  :year calendar_year))))
; 
; (defwindow calendar
; 	:geometry (geometry :x "-20px" 
; 						:y "7%" 
;                         :anchor "top right"
; 						:width "270px" 
; 						:height "60px")
; (cal))
; 
; 
; 
; (defwidget audio []
; 	(box :class "audio-box" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
; 	(box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
; 	(box :class "speaker_icon" :orientation "v")
; 	(box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
;     (label :class "speaker_text" :text "speaker" :valign "center" :halign "left" )
; 	(box :class "speaker_bar" :halign "center" :vexpand "false" :hexpand "false"
; 	(scale    :value volume_percent
;               :space-evenly "false"
; 			  :orientation "h"
; 			  :onchange "amixer -D pulse sset Master {}%" 
;               :tooltip "volume on ${volume_percent}%"
; 			  :max 100
; 			  :min 0))))
;             (label :text "" :class "audio_sep" :halign "center")
; 	(box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
; 	(box :class "mic_icon" :orientation "v")
; 	(box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
;     (label :class "mic_text" :text "mic" :valign "center" :halign "left" )
; 	(box :class "mic_bar" :halign "center" :vexpand "false" :hexpand "false"
; 	(scale    :value mic_percent
;               :space-evenly "false"
; 			  :orientation "h"
;               :tooltip "mic on ${mic_percent}%"
; 			  :onchange "amixer -D pulse sset Capture {}%" 
; 			  :max 100
; 			  :min 0))))))
; 
; (defwindow audio_ctl
; 	:geometry (geometry :x "-20px" 
; 						:y "7%" 
;                         :anchor "top right"
; 						:width "280px" 
; 						:height "60px")
; (audio))
; 
; 
; (defwindow system
; 	:geometry (geometry :x "-20px" 
; 						:y "7%" 
;                         :anchor "top right"
; 						:width "290px" 
; 						:height "120px")
; (system))
; 
; 
; 
; ;;  Music
; (defwidget music_pop []
; 		(box :class "music_pop" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
; 			(box :class "music_cover_art" :vexpand "false" :hexpand "false" :style "background-image: url('${cover_art}');")
; 			(box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
; 				(label :halign "center" :class "music" :wrap "true" :limit-width 13 :text song)
; 				(label :halign "center" :class "music_artist" :wrap "true" :limit-width 15 :text song_artist)
; 				(box :orientation "h" :spacing 15 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
; 					(button :class "music_btn_prev" :onclick "~/.config/eww/bar/scripts/music_info --prev" "")
; 					(button :class "music_btn_play" :onclick "~/.config/eww/bar/scripts/music_info --toggle" song_status)
; 					(button :class "music_btn_next" :onclick "~/.config/eww/bar/scripts/music_info --next" ""))
; 				(box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false" :space-evenly "false"
; 					(scale :onscroll "mpc -q seek {}" :min 0 :active "true" :max 100 :value current_status)))))
; 
; 
; ;;  music
; 		(defwindow music_win :stacking "fg" :focusable "false" :screen 1
; 			    :geometry (geometry :x "0" :y "7%" :width 428 :height 104 :anchor "top center")
; 			     				(music_pop))
; 
